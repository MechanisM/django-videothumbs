ABOUT:
=====

This library adds a video field to Django and auto generates thumbnails on the video that was uploaded.
This library was largely inspired by the django-thumbs library: http://code.google.com/p/django-thumbs/

NOTE: Do to the lack of thorough testing I consider this project to be ALPHA.
      More testing needs to be done. Please submit any feedback or bugs that you have.


HOW IT WORKS:
============
Works identically by nature the way that django-thumbs does. If a programmer defines the 
sizes attribute then a given frame is extracted from the video and resized the the sizes requested.

ffmpeg is used to extract n number of frames.  Next, once a frame is extracted,
an image historgram is created for each n number of frames. An average is then 
computed to find the image with that contains the most colors. The reason for doing this is to
attempt to cut out the black segments that sometimes appear at the beginning of movies.

The higher the frame count the better the results but more CPU is required.

Thats basically the gist of it. 

REQUIREMENTS:
============
python-imaging PIL
ffmpeg 

DEBIAN BASED INSTALL:
====================
sudo apt-get install python-imaging
sudo apt-get install ffmpeg


INSTALL:
=======

Place this file in your django project directory or somewhere along your python path and 
make sure that the above requirements are met.

USAGE:
=====

simply import videothumbs and call it as shown in the example below

e.g - 

import  videothumbs

class HomeVideo(models.Model):
    video = videothumbws.VideoThumbField(upload_to='videos', sizes=((125,125),(300,200),))

To retrieve video URL, exactly the same way as with FileField:
    my_object.video.url
To retrieve thumbnails URL's just add the size to it:
    my_object.video.url_125x125
    my_object.video.url_300x200

filename.[width]x[height].extension

For storing a file called "video.mpeg" it saves:
video.mpeg          (original file)
video.125x125.jpg  (first thumbnail)
video.300x200.jpg  (second thumbnail)


TODO:
=====
- More testing. I haven't had the chance to thoroughly test.
- Error handling for when a non-video file is uploaded (The way that ImageField works)
- Add a 'frames' attribute to the VideoThumbsField so that n number of frames
  can be defined for each field. Currently the default is 100
- Find other ways that frames can be extracted.
    e.g - pull out a frame at a given time segment
- regenerate thumbnails